// print all the variables at once in console using console.table().
console.table([var1, var2, var3])

====================================================================================================================

variables: const, let, var

const  - cannot change variable once assigned.
let    - have scope, if assigned inside a if condition will be available inside that block not anywhere else.
var    - does not have scope, assigned in one place can be changed anywhere.(currently not used)

====================================================================================================================

ECMA script(website to check TC39): is just a standard method for scripting languages, javascript.

datatypes: number => 2^53, string => "", bigint, boolean => true/false, null, undefined, symbol, object

null      - ex: let temperature = null, null is a OBJECT used to represent empty value.
undefined - ex: let num, num variable is declared but not assigned/defined so it is undefined.
symbol    - ex: used in figma tools, react, used to find uniqueness in different components.

typeof: datatypes of variables.

typeof null      - object.
typeof undefined - undefined.

====================================================================================================================

Datatype Conversion: 

Number - ex: Number("33")       => 33
         ex: Number("33abc")    => NaN
         ex: Number(null)       => 0 
         ex: Number(undefined)  => NaN
         ex: Number(true/false) => 1/0

Boolean - ex: Boolean(1/0) => true/false
          ex: Boolean("hi"/"") => true/false

String - ex: String(33) => 33, typeof 33 => string

====================================================================================================================

String Conversion, operation, precedence: 

console.log("1" + 2 + 2) - op: 122, converts datatypes to 1st datatypes, here number is converted into string.
console.log(1 + 2 + "2") - op: 32, converts datatypes to 1st datatypes, here string is converted into number.
console.log(+true)       - op: 1
console.log(true+)       - op: error
console.log(+"")         - op: false

++counter - increment 1st then returns value
counter++ - returns value then increments it

====================================================================================================================

Datatypes comparison and operators: 

==(equal to)         - compares only the value of the variable.
===(strict equal to) - compares both value and datatype of the variable.

null      -> == and >, <, >=, <= -> works differently.
             >, <, <=, >=        -> converts null to number(0) ex: null >= 0 is true, null > 0 is false
             ==                  -> ex: null == 0 is false, it does not converts it (unpredictable result)

undefined -> ==, <=, >=, >, <    -> same result as false.

====================================================================================================================

Datatypes summary: 

Javascript is dynamically typed language as we dont need to specify the data type while declaring variables.

In js data is stored and accessed from memory in two types:

primitive data types     : string, number, null, undefined, boolean, symbol, bigint.
non-primitive data types : array, objects, functions.

functions: 
function sayHello(){ // remember class creates objects for reference
    return "Hello World"
}

sayHello.greeting = "Hii"

Symbols: 

const id = Symbol('123')
const anotherId = Symbol('123')

console.log(id === anotherId) // op: false

====================================================================================================================

Stack and Heap memory:

Memory is freed automatically by garage collector.

Stack memory(primitive) - used in primitive datatype(because copy of actual value is stored in another variable so it is independent of the actual value) 
               ex: name = "venish"
               anotherName = name
               anotherName = "hi"
               op: name, anotherName -> venish, hi 

Heap memory(non-primitive)  - used in non-primitive datatype(because actual(original) value is modified)
                ex: userOne = {
                    email: "eamil@gmail.com",
                    name: "venish"
                }

                userTwo = userOne

                userTwo.email = "changed@gmail.com"

                op: userOne, userTwo -> same as userTwo, {email: "changed@gmail.com", name: "venish}

====================================================================================================================

Strings:
correct method to use variables in string(called as string interpolation): `Hii example, ${variable}`

2 types of defination in string: const var = "string"
                                 consr var = new String("string")

string functions: var.length, 
                  toUpperCase, 
                  charAt('s')         => gives positions of the character, 
                  indexOf(2)          => gives character at that index, 
                  substring(0, 4)     => no negative indexing in substring, 
                  slice(-6, 4), 
                  slice(0, 4)         => same result for both negative index can be used here, 
                  trim(), 
                  replace('%20', '-') => used in url, 
                  includes(), 
                  split("")

====================================================================================================================

Number and Maths:

2 types of defination in number : const var = 100 op: 100
                                  const varNum = new Number(100) op: [Number: 100]
funnctions in number            :
                                 varNum.toFixed(2) op: 100.00 (precision function is toFixed())
                                 varNum.toString() op: 100 
                                 varNum = 123.899
                                 varNum.toPrecision(4) op: 123.9 
                                 varNum.toPrecision(3) op: 123 
                                 varNum.toPrecision(2) op: 1.2e+2 

                                 const hundreds = 1000000
                                 console.log(hundreds.toLocaleString('en-IN'))

                                 Number.MAX_VALUE (not a function) => return max value
                                 Number.MIN_VALUE

Maths:

Math.abs(-4)    => converts negative to positive alone
Math.round(3.4) => round off to 3
.ceil(4.2)      => 5
.floor(4.9)     => 4

//important
Math.random()   => returns value only ranging from 0 to 1
                   ex:
                   const min = 10
                   const max = 20

Math.floor(Math.random() * (max - min + 1)) + min // + 1 to avoid 10

====================================================================================================================

Date and Time:

//important
Date - Date is an object 
Date functions - const date = new Date()
                 date.toString() // op: 
                 date.toLocaleString() // op:
                 date.toDateString() // op: 
                 date.getTime() // op: gives time in milliseconds(1231241351) from january 1 1990 it is easy to compare in application
                 Date.now() // op: gives current time in milliseconds
                 Math.floor(Date.now()/1000) // op: converts milliseconds to seconds
                 `${Date.getDay()} and the time is ...`
                 const myDate = new Date("14-01-2024") // outputs date in this format

                 date.toLocaleString('default', { // for customization like jan to january
                    weekday: 'long'
                 })

====================================================================================================================

Arrays:

Array - Array is an object which does shallow copy means it is stored in heap memory new variable has reference to it.

arr.push(2)
arr.pop() => delete last value
arr.length
arr.unshift(9) => inserts at 0 index // not optimized
arr.shift() => removes at 0 index // not optimized
.includes(9)
.indexOf(9)
arr.join() => type is string seperated by , default
arr.slice(1, 3) => returns the specific index value
arr.splice(1, 3) => returns the specific index value till last index and also removes that range of value from original array and the original array has only the remaining values
ex: const arr = [1,2,3,4,5]
arr.splice(1,2) op: [1,2]  original array, arr = [3,4,5]