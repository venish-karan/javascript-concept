// print all the variables at once in console using console.table().
console.table([var1, var2, var3])

====================================================================================================================

variables: const, let, var

const  - cannot change variable once assigned.
let    - have scope, if assigned inside a if condition will be available inside that block not anywhere else.
var    - does not have scope, assigned in one place can be changed anywhere.(currently not used)

====================================================================================================================

ECMA script(website to check TC39): is just a standard method for scripting languages, javascript.

datatypes: number => 2^53, string => "", bigint, boolean => true/false, null, undefined, symbol, object

null      - ex: let temperature = null, null is a OBJECT used to represent empty value.
undefined - ex: let num, num variable is declared but not assigned/defined so it is undefined.
symbol    - ex: used in figma tools, react, used to find uniqueness in different components.

typeof: datatypes of variables.

typeof null      - object.
typeof undefined - undefined.

====================================================================================================================

Datatype Conversion: 

Number - ex: Number("33")       => 33
         ex: Number("33abc")    => NaN
         ex: Number(null)       => 0 
         ex: Number(undefined)  => NaN
         ex: Number(true/false) => 1/0

Boolean - ex: Boolean(1/0) => true/false
          ex: Boolean("hi"/"") => true/false

String - ex: String(33) => 33, typeof 33 => string

====================================================================================================================

String Conversion, operation, precedence: 

console.log("1" + 2 + 2) - op: 122, converts datatypes to 1st datatypes, here number is converted into string.
console.log(1 + 2 + "2") - op: 32, converts datatypes to 1st datatypes, here string is converted into number.
console.log(+true)       - op: 1
console.log(true+)       - op: error
console.log(+"")         - op: false

++counter - increment 1st then returns value
counter++ - returns value then increments it

====================================================================================================================

Datatypes comparison and operators: 

==(equal to)         - compares only the value of the variable.
===(strict equal to) - compares both value and datatype of the variable.

null      -> == and >, <, >=, <= -> works differently.
             >, <, <=, >=        -> converts null to number(0) ex: null >= 0 is true, null > 0 is false
             ==                  -> ex: null == 0 is false, it does not converts it (unpredictable result)

undefined -> ==, <=, >=, >, <    -> same result as false.

====================================================================================================================

Datatypes summary: 

Javascript is dynamically typed language as we dont need to specify the data type while declaring variables.

In js data is stored and accessed from memory in two types:

primitive data types     : string, number, null, undefined, boolean, symbol, bigint.
non-primitive data types : array, objects, functions.

functions: 
function sayHello(){ // remember class creates objects for reference
    return "Hello World"
}

sayHello.greeting = "Hii"

Symbols: 

const id = Symbol('123')
const anotherId = Symbol('123')

console.log(id === anotherId) // op: false

====================================================================================================================

Stack and Heap memory:

Memory is freed automatically by garage collector.

Stack memory(primitive) - used in primitive datatype(because copy of actual value is stored in another variable so it is independent of the actual value) 
               ex: name = "venish"
               anotherName = name
               anotherName = "hi"
               op: name, anotherName -> venish, hi 

Heap memory(non-primitive)  - used in non-primitive datatype(because actual(original) value is modified)
                ex: userOne = {
                    email: "eamil@gmail.com",
                    name: "venish"
                }

                userTwo = userOne

                userTwo.email = "changed@gmail.com"

                op: userOne, userTwo -> same as userTwo, {email: "changed@gmail.com", name: "venish}

====================================================================================================================

